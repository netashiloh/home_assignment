pipeline {
    agent { label "master-executer"}
    environment {
        registry = "339870914716.dkr.ecr.us-east-1.amazonaws.com/python-http"
    }
    stages {
        stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/alternative_app']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/netashiloh/home_assignment.git']]])     
            }
        }
    // Creating ECR
    stage ('apply ECR') {
        steps{
            dir('./iaac/ecr') {
            script {
                sh 'terraform init --reconfigure'
                sh 'terraform apply -auto-approve'
          }
        }        
      }
    }
    // Building Docker images
    stage('Building image') {
        steps{
          dir('./app') {
            script {
                dockerImage = docker.build("python-flask")
            }
          }
        }
    }
   
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
         script {
                sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 339870914716.dkr.ecr.us-east-1.amazonaws.com'
                sh 'docker tag python-flask:latest 339870914716.dkr.ecr.us-east-1.amazonaws.com/python-flask:latest'
                sh 'docker push 339870914716.dkr.ecr.us-east-1.amazonaws.com/python-flask:latest'
         }
        }
      }

    }
}